<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI - Communication Feedback</title>
    <!-- Bootstrap 5 CSS CDN -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <!-- Google Fonts: Roboto -->
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <!-- Custom CSS for Styling and Animations -->
    <style>
        body {
            background: linear-gradient(135deg, #0a0a23, #064e3b);
            font-family: 'Roboto', sans-serif;
            color: #fff;
            min-height: 100vh;
            overflow-x: hidden;
        }
        .header {
            background: rgba(0, 0, 0, 0.7);
            padding: 1.5rem;
            text-align: center;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }
        .header h1 {
            font-size: 3rem;
            font-weight: 700;
            color: #00d4ff;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        }
        .option-btn {
            transition: all 0.3s ease;
            padding: 1rem 2rem;
            font-size: 1.25rem;
            border-radius: 10px;
            width: 200px;
            margin: 0; /* Removed margin to align side-by-side */
        }
        .option-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 0 20px rgba(0, 212, 255, 0.5);
            background-color: #0052cc;
        }
        .record-btn:hover {
            background-color: #15803d;
        }
        .feedback-box {
            background: #fff;
            color: #333;
            border-radius: 15px;
            padding: 2rem;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
            animation: fadeIn 1s ease-in;
        }
        @keyframes fadeIn {
            0% { opacity: 0; transform: translateY(20px); }
            100% { opacity: 1; transform: translateY(0); }
        }
        video {
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }
    </style>
</head>
<body>
    <!-- Header with App Name -->
    <header class="header">
        <h1>EvalMate</h1>
        <p class="lead text-light">Your AI-Powered Communication Coach</p>
    </header>

    <!-- Main Content -->
    <main class="container py-5">
        <!-- Upload and Record Options -->
        <section class="d-flex flex-row justify-content-center align-items-center mb-5">
            <!-- Upload Video -->
            <div class="me-3">
                <form id="upload-form" action="/upload" method="post" enctype="multipart/form-data">
                    <label for="video-upload" class="btn btn-primary option-btn">Upload Video</label>
                    <input id="video-upload" type="file" accept="video/*" class="d-none" onchange="uploadFile(event)">
                </form>
            </div>
            <!-- Record Video -->
            <button onclick="startRecording()" class="btn btn-success option-btn record-btn">Record Video</button>
        </section>

        <!-- Video Preview Section -->
        <section id="video-section" class="d-none text-center mb-5">
            <h2 class="h4 text-light mb-3">Video Preview</h2>
            <video id="video-preview" controls class="w-100" style="max-width: 600px;"></video>
            <div id="recording-controls" class="mt-3">
                <button id="stop-recording" onclick="stopRecording()" class="btn btn-danger me-2 d-none">Stop Recording</button>
                <button id="go-analysis" onclick="submitVideo()" class="btn btn-primary d-none">Go with Analysis</button>
            </div>
        </section>

        <!-- Grading and Feedback Section -->
        <section id="feedback-section" class="d-none">
            <div class="feedback-box mx-auto" style="max-width: 600px;">
                <h2 class="h4 mb-3">Your Communication Feedback</h2>
                <p id="feedback-score" class="h5 text-primary"></p>
                <p id="feedback-text" class="text-muted"></p>
                <a href="/" class="btn btn-success">Analyze Another Video</a>
            </div>
        </section>
    </main>

    <!-- Bootstrap 5 JS and Popper.js -->
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js" integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js" integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy" crossorigin="anonymous"></script>
    <!-- JavaScript for Video Upload, Recording, and Submission -->
    <script>
        let mediaRecorder;
        let recordedChunks = [];

        // Upload File Function
        function uploadFile(event) {
            const file = event.target.files[0];
            if (file && file.type.startsWith('video/')) {
                const formData = new FormData();
                formData.append('video', file);
                fetch('/upload', {
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    console.log(data);
                    if (data.error) {
                        alert(data.error);
                    } else {
                        alert('Video uploaded: ' + data.filename);
                        displayVideo(file);
                        document.getElementById('go-analysis').classList.remove('d-none');
                    }
                })
                .catch(error => console.error('Error:', error));
            } else {
                alert('Please upload a valid video file.');
            }
        }

        // Display Video Preview
        function displayVideo(file) {
            const videoSection = document.getElementById('video-section');
            const videoPreview = document.getElementById('video-preview');
            const goAnalysisButton = document.getElementById('go-analysis');
            videoSection.classList.remove('d-none');
            videoPreview.src = URL.createObjectURL(file);
            goAnalysisButton.classList.remove('d-none');
            document.getElementById('recording-controls').classList.add('d-none');
            window.scrollTo({ top: videoSection.offsetTop, behavior: 'smooth' });
        }

        // Start Video Recording
        async function startRecording() {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
                const videoSection = document.getElementById('video-section');
                const videoPreview = document.getElementById('video-preview');
                const stopButton = document.getElementById('stop-recording');
                const goAnalysisButton = document.getElementById('go-analysis');

                videoSection.classList.remove('d-none');
                videoPreview.srcObject = stream;
                videoPreview.play();
                stopButton.classList.remove('d-none');
                goAnalysisButton.classList.add('d-none');
                document.getElementById('recording-controls').classList.remove('d-none');

                mediaRecorder = new MediaRecorder(stream);
                recordedChunks = [];
                mediaRecorder.ondataavailable = (event) => {
                    if (event.data.size > 0) {
                        recordedChunks.push(event.data);
                    }
                };
                mediaRecorder.onstop = () => {
                    const blob = new Blob(recordedChunks, { type: 'video/webm' });
                    videoPreview.srcObject = null;
                    videoPreview.src = URL.createObjectURL(blob);
                    goAnalysisButton.classList.remove('d-none');
                    recordedChunks = [];
                    stream.getTracks().forEach(track => track.stop());
                };
                mediaRecorder.start();
                window.scrollTo({ top: videoSection.offsetTop, behavior: 'smooth' });
            } catch (error) {
                alert('Error accessing webcam: ' + error.message);
            }
        }

        // Stop Recording
        function stopRecording() {
            if (mediaRecorder && mediaRecorder.state !== 'inactive') {
                mediaRecorder.stop();
                document.getElementById('stop-recording').classList.add('d-none');
            }
        }

        // Submit Video for Analysis
        function submitVideo() {
            const videoPreview = document.getElementById('video-preview');
            const feedbackSection = document.getElementById('feedback-section');
            const feedbackScore = document.getElementById('feedback-score');
            const feedbackText = document.getElementById('feedback-text');
            const blob = new Blob(recordedChunks, { type: 'video/webm' });
            const formData = new FormData();
            const filename = 'recorded-video_' + Date.now() + '.webm'; // Unique filename
            formData.append('video', blob, filename);

            fetch('/upload', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    alert(data.error);
                } else {
                    feedbackSection.classList.remove('d-none');
                    feedbackScore.textContent = 'Score: (AI-assigned)';
                    feedbackText.innerHTML = data.feedback.replace(/\n/g, '<br>');
                    window.scrollTo({ top: feedbackSection.offsetTop, behavior: 'smooth' });
                }
            })
            .catch(error => alert('Upload failed: ' + error));
        }
    </script>
</body>
</html>